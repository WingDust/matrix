;;; 闭合符号是造成代码嵌套、公式、表达式嵌套罪魁祸首
;;; Qwety Bad design for Symbol type
;;; 让代码尽量简洁、可读、易于调试
;;; 让原本的一行并列结构，尽量转成多行并列结构，不害怕多的换行，一行只做一件事
;;; 缩进结构已经表达了范围概念，不需要在做多余的事



;; import { } from "vue"
;; 这样的引用格式写法是有问题的，先在行尾指明引入名，后又跑到行中指定引入项


;; 有两个表达式并列时，才需要 and or ，一个则没有，
if and
  1+1
  2+2


;; 两个分号为一个行注释

;; 自动方法归属注解为编辑器行为，分号是为了归属补全
;Object.keys


;; 标准库
'aaa'
.println

;; 字面量字符串
;; s-qwe
;; -qwe-
'qwe'

;; 函数定义
fn foo a a
  a + a

;; 函数调用
2 2
.foo 

;; 注释一个函数

;; 函数装饰
time
fn foo a a
  a + a

;; 函数捕获参数 将一次函数链式必须换行
'qwe'
  .foo '2'


;; 对于像swtich 这样的语法，虽然它实现了分支，但是对于每一个分支的统一处理是没有被抽象的，
;; 如当分支中尾部区有相同的逻辑时，意味着每一个分支的尾部都有相同的代码，这些相同的代码理应抽象到一个地方的
;; goto 语义能包含这个语义

;; 在同一个文件下定义的函数，能轻易的访问到当前文件下的全局变量，而在不同文件下时，就需要导入才能使用，
;; 如 Vue3 setup 中函数写，将会很自然的成闭包式引用变量，而在通过外部文件的定义函数，
;; 想使用 setup 中已定义的变量，就是一件很麻烦的事

;; 让代码可以一行只运行为一个语句
;; 这样有利于判断代码运行步数
