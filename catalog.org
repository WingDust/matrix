#+filetags: :Project:Package-Mangement:

* Catalog of Package
** 外部应用
- W32-browser.el
- atomic-chrome
** 文本模版
- Yasnippet
** 文本检索
- swiper
** 编辑模式
- evil
** 补全框架
- [[http://blog.lujun9972.win/emacs-document/blog/2018/06/04/ivy,-counsel-%E5%92%8C-swiper/index.html][1什么是Ivy?]]
** 文本操作
- evil-matchit
** 文本翻译
- youdao-dictionary
** 文学编程
- ob-deno
- ob-powershell.el
- ob-rust
- ob-python
** org mode 格式
- valign
** Reference
- [[https://emacs-china.org/t/javascript-archive-contents/16730][如何用 JavaScript 解析 archive-contents 文件？]]
- [[https://github.com/kiwanami/emacs-deferred][emacs-deferred]]
- [[https://liujiacai.net/blog/2021/05/05/emacs-package/][Emacs 包管理指南]]
- [[https://www.hopenglish.com/hope-tips-book-glossary][『封面、封底、目錄、序...』英文怎麼說？]]
- [[https://www.wemlion.com/post/firefox-webrender/][极速渲染引擎 WebRender 揭秘]]
- [[https://emacs-china.org/t/topic/5442][分享一篇关于历代 Emacs 中 buffer 实现的论文。]]
- [[https://emacs-china.org/t/1960-lisp/2542][1960年lisp原始论文]]
- 注释
  - [[https://emacs-china.org/t/topic/8957][如何善用注释／文档中的代码？]]
  - [[https://emacs-china.org/t/separedit-el-docstring/11196][separedit.el: 在单独的缓冲区编辑注释、docstring 或其中的代码块]]
  - [[https://emacs-china.org/t/docstring-emacs/8182][Docstring 源自 Emacs]]
  - [[https://emacs-china.org/t/topic/4464][运行 docstring 中的测试]]
  - [[https://emacs-china.org/t/python-docstring-docstring/13087][分享：自动插入 python docstring 以及 docstring 高亮]]
- Markdown 
  - [[https://zhuanlan.zhihu.com/p/99319314][Markdown语法及原理从入门到高级]]
- 表达式
  - [[https://codewords.recurse.com/issues/two/not-everything-is-an-expression][Not everything is an expression]]
- 渲染
  - [[https://github.com/skywind3000/RenderHelp][RenderHelp]]
  - [[https://github.com/trishume/quickdown][quickdown]]
  - [[https://mozillagfx.wordpress.com/2017/09/21/introduction-to-webrender-part-1-browsers-today/][Introduction to WebRender – Part 1 – Browsers today]]
  - [[https://github.com/cisen/blog/issues/619][servo 源码学习相关 ]]
- 文件结构
  - [[https://emacs-china.org/t/monad/11280][关于“当前主流操作系统的文件管理器是否缺少Monad操作”的一点思考]]
- VSCode 命令记录 
  - show hover
  - cursorTip
  - tofile
  - go to definition
- linux
  - [[https://emacs-china.org/t/topic/3604/6][Static Linux]]
- 类型系统
  - [[https://www.xmyipin.com/article/5124.html][Hindley-Milner 类型系统的根本性错误]]
- Meterial Design
- 浏览器代码
  - [[https://limpet.net/mbrubeck/2014/08/08/toy-layout-engine-1.html][Let's build a browser engine!]]
  - [[https://github.com/HiRoFa/spidermonkey_runtime][spidermonkey_runtime]]
  - [[https://juejin.cn/post/6844904021308735502][(1.6w字)浏览器灵魂之问，请问你能接得住几个？]]
- 函数式编程
  - [[https://juejin.cn/post/6969016132741103624][XDM，JS如何函数式编程？看这就够了！（二）]]
  - [[https://www.cnblogs.com/xiaonian8/p/13821551.html][Javascript之尾调用]]
  - [-] [[https://wizardforcel.gitbooks.io/functional-light-js/content/ch2.html][JavaScript 轻量级函数式编程]] [1/10] [10%]
    - [X] 第二章：函数基础
      - arguments 是你输入的值（实参）， parameters 是函数中的命名变量（形参）
      - 函数重载虽减少api数量，但减少了代码的可读性
      - 减少使用返回值来控制，而是通过一行的最后返回
      - 需要尽可能避免使用闭包来记录状态更改
    - [ ] 第三章：管理函数的输入
      - 偏应用：固定一个函数的一些参数，然后产生另一个更小元（元指函数形参的个数）的函数
    - [ ] 第四章：组合函数
    - [ ] 第五章：减少副作用
    - [ ] 第六章：值的不可变性
    - [ ] 第七章：闭包 vs 对象
    - [ ] 第八章：列表操作
    - [ ] 第九章：递归
    - [ ] 第十章：异步的函数式
    - [ ] 第十一章：融会贯通
- 编译 
  - 任务编译，编译阈值
  - 闲时编译
  - 请求加速编译
#+begin_quote
还是想了想，只有取消 Html 这门语言，因为在越大型 Web,类Web 项目中，Html变得极为复杂，可读性极差，还有层层的嵌套结构。

一个文件虚的地方，与实的地方
样式变化，响应
监听器逻辑，在回调中需要再处理监听器
#+end_quote

    
    

  
**  sciter
- [[https://github.com/sciter-sdk/rust-sciter][rust-sciter]]
- [[https://www.zhihu.com/question/276815517][什么语言最适合做 GUI？]]
- [[https://www.zhihu.com/question/37117129][做PC的客户端软件开发框架选择，sciter vs QT，用哪个好点？]]
**  javascript 古怪
- [[https://bonsaiden.github.io/JavaScript-Garden/zh/#other.timeouts][JavaScript 秘密花园]]
- [[https://cuiqingcai.com/6808.html][JavaScript API 设计原则详解]]
* 脚本语言设计 

** 类elisp片段直接运行                                               :默认行为:
** 无GC                                                                 :默认行为:
- V Lang
** 缩进结构                                                          :默认行为:
- 优化 类vim 缩进操作
** 缩空格 补Tab                                                 :规范行为:必须:
**  顺序结构
- 优化 =!=== (不是这个的情况)这种逻辑
- if () 与 if () else ()
- 代码运行次数与UI示意
** 类型系统                                                     :规范行为:可选:
** 所有权                                                       :规范行为:必须:
**  人类字符串处理                                              :规范行为:必须:
- 替换
- 包含
- 分割
- 拼接 
- 使用正则表达式来做字符串处理，都需要手动做处理，这样极会导致人为错误，而且测试繁杂，而通过语义化式处理字符串，会更明晰，还可做语义补全
** 数字
- 有理数计算
  - 最小到 0 
  - 增加上限
  - 只进行整数计算
** 定长可变                                                     :规范行为:可选:
** 越界处理                                                     :规范行为:必须:
** 同异顺序处理
** 注释
*** 文档注释                                                       :规范行为:可选:
*** 模版注释                                        :规范行为:可选:编辑器行为:
*** 集成，优化，合并 Markdown Org mode Html
- 网页需要动态添加标签，所以它需要知道被添加的范围
*** 双语注释
** 宏                                                           :规范行为:扩展:
** 标准库
*** 非空置空函数
** 不安全代码                                                        :规范行为:
** 减少层级包装                                                      :规范行为:
** 不使用闭合字符
** elisp 的片段执行                                                :执行器行为:
** 取除分号
** 定义与调用的区分
** 取消表达式嵌套
#+begin_src 
multi = ''
;; qwerty
`\[]-=/.,
~!@#$%^&*()_+{}"|?><
;; dvrak
';,.-=/\[]`

;; dvrak progarmming
';,./@\-=[]`

;; 执行器
不运行字符串拼接

;; 取消等于号用来表达赋值
;; 变量赋值一需要指定变量的名字 二需要指定变量的值
;; 常量是运行时的固定值，只有第一次有效定义
;; 问题是我是否需要使用者的输入的值，而是开发者定义的值，只有最后一次有效修改
;; 常量是一定要指定值，而变量是初始化居多，所以放弃变量初始化这个操作，而转变成函数结束返回值，也能做到取消类型多项共存
;; 也就将 初始化-处理-结束 -> 处理-结束
var name 'app'

数组定义
1,3,3

;; 对数组指定范围处理

;; 已知要被处理数据类型，传参做处理

;; 函数定义
fn foo app name:
  app + name
;; 函数调用
;; 函数中需要传一个函数像 requestAnimationFrame
foo app name
foo 3 4 5  
;; 函数方法共用调用方式，通过编辑器行为 语法高亮 区别开 方法 函数 异步 同步
;; 通过公约注释对函数进行结构归属
;; 减少变量名的定义
'app'
  .foo
  ;Number.tonumber 2
  .expect

;; 排序函数，方法 标注出排序标准

;; 减少魔术字符串

#+end_src
**  取消CSS的简写形式 增强语义
**  取消隐性继承 如 =height:100%;=
* UI 设计
- 只读区与可写区共存
- 当前光标能在弹出框存在时进入弹出框
- 直接进入其他区域
- [[https://emacs-china.org/t/topic/4038/40][这里有一个问题和你的好相似： 为什么Sketch的取色器会出现色差？ ]]
* 图形程序接口
- [[https://www.bgteach.com/article/176][图形程序接口知多少 | OpenGL、OpenCL、Vulkan、OpenGL ES、WebGL、Metal、Directx]]
* 三维软件
- [[https://www.bgteach.com/article/40][三维软件知多少 | Blender、3dsMax、Maya、Houdin、Cinema 4D、Clarisse、LightWave]]
* 虚幻引擎 
- [[https://www.oschina.net/news/156560/unreal-engine-4-27-released][虚幻引擎 (Unreal Engine) 4.27 发布]]
